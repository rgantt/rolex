h2. Rolex is a simple timing utility for PHP 5.3

Rolex is designed to measure the runtime of blocks of code. Since the easiest way to look at the execution time of an entire scope is by throwing code into a function body, that's what @rolex@ encourages. It's prettier (TM) than just tossing in @start()@ and @stop()@ calls (although you can do that too, if you want).

Rolex consists of utility classes that are accessible through a static class facade.

h2. Example usage

You want to compare execution time of variable versus instance variable access. In that case, run two profiles (one for the former and one for the latter).

The first might look like:

pre. require_once "rolex/rolex.php";
use rolex\r;
$obj = new stdClass;
$obj->foo = "bar";
$dev_null = null;
echo r::run( "instance variable access", function() use( $obj, $dev_null ) {
    $dev_null = $obj->foo; // to test how long it takes to make the assignment
});

The second:

pre. require_once "rolex/rolex.php";
use rolex\r;
$foo = "bar";
$dev_null = null;
echo r::run( "scope variable access", function() use( $foo, $dev_null ) {
    $dev_null = $foo; // to test how long it takes to make the assignment
});

Measuring execution time always creates a @result_set@ object which is populated with the message you provide and the duration. By default, treating the @result_set@ as a string simply displays this message along with average duration. A call to @r::run@ returns the message you provide with the execution time appended to it. For the first example, you might see @instance variable access: avg. over 1000 iterations = 1.200102939 ms@ as the result.

You can do whatever you want with the @result_set@. It's just a linked list. Go crazy.

The overhead of the timing code is minimal and constant. You call it simply, and it does what you expect: displays the difference in ms between the moment the closure is called and the moment the closure is finished executing (or the block if you are manually starting and stopping).

h3. Manual starts and stops

If you prefer not to use a closure, time _anything_ by starting and stopping the timer manually. Just provide a unique key to the @r::start()@ method so that rolex can keep track of which timers are currently going. Provide that same key to @r::stop()@ when you want the timer to end.

For example, measure this loop:

pre. require_once "rolex/lib/rolex.php";
use rolex\r;
r::start( "a unique key", "measure my function!" );
for( $i = 0; $i < 10000000; $i++ ) {
	do_something_measurable();
}
echo r::stop("a unique key");

@r::stop()@ returns a result object, which contains both a message and a duration. You cannot control the number of iterations that are run when you manually start and stop, because @rolex@ has no access to the code in between.