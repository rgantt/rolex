h2. Rolex is a simple timing and profiling utility written in PHP

It's designed to time and document the performance of closures, since this is the easiest way to look at the execution time of an entire scope. It's "prettier" than just tossing in start() and stop() calls like most PHP profilers seem to do (although you can certainly do that, too!).

The software itself consists of a handful of utility classes that are easily accessible through a facade of static class methods.

h2. Example usage

Suppose that you wanted to compare the execution time of variable access versus instance variable access. In that case, you would run two profiles (one for the former and one for the latter).

The first might look like:

pre echo r::run( "instance variable access", function() {
    $obj = new stdClass;
    $obj->foo = "bar";
    $dev_null = null;
    
    for( $i = 0; $i < 10000000; $i++ ) {
        $dev_null = $obj->foo; // to test how long it takes to make the assignment
    }
});

Your second profile might look like:

pre echo r::run( "straight-up variable access", function() {
    $foo = "bar";
    $dev_null = null;
    
    for( $i = 0; $i < 10000000; $i++ ) {
        $dev_null = $foo;
    }
});

You can see that the profiling code is really minimal. You call it simply, and it does what you expect: it displays the difference in float microtime between the moment the closure is called and the moment the closure is finished executing.

The default output of a call to @r::run@ is the message you provide the profiler with the execution time appended to it. For the first example, you might see @instance variable access 1.200102939933@ as the result.